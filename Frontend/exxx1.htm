<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Employee Leave Management</title>
<style>
  :root {
    --primary: #4361ee;
    --primary-light: #4895ef;
    --secondary: #3f37c9;
    --accent: #f72585;
    --dark: #1a1a2e;
    --light: #f8f9fa;
    --success: #4cc9f0;
    --warning: #f8961e;
    --danger: #ef233c;
    --gray: #6c757d;
    --gray-light: #e9ecef;
    --border-radius: 12px;
    --box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
  }

  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  body {
    font-family: 'Poppins', -apple-system, BlinkMacSystemFont, sans-serif;
    line-height: 1.6;
    /* color: var(--dark); */
    min-height: 100vh;
  }

  .container {
    max-width: 1280px;
    margin: 0 auto;
    padding: 2rem;
  }

  h1, h2, h3 {
    color: var(--dark);
    font-weight: 600;
  }

  /* Banner Styles */
  .banner {
    background: linear-gradient(135deg, var(--primary), var(--secondary));
    color: white;
    text-align: center;
    padding: 3rem 1.5rem;
    border-radius: var(--border-radius);
    /* margin-bottom: 2rem; */
    box-shadow: var(--box-shadow);
    position: relative;
    overflow: hidden;
  }

  .banner::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 70%);
    transform: rotate(30deg);
    z-index: 1;
  }

  .banner h1 {
    color: white;
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    position: relative;
    z-index: 2;
    text-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .banner .quote {
    font-size: 1.125rem;
    opacity: 0.9;
    position: relative;
    z-index: 2;
    font-weight: 300;
  }

  /* Main Container for Split Layout */
  .main-container {
    display: flex;
    gap: 2rem;
    margin-bottom: 2rem;
    flex-wrap: wrap;
    position: relative;
  }

  /* Glassmorphism Card Style */
  .card {
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    border: 1px solid rgba(255, 255, 255, 0.18);
    transition: var(--transition);
  }

  .card:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
  }

  /* Leave Request Form */
  .leave-request {
    padding: 2.5rem;
    width: 100%;
    max-width: 700px;
    animation: fadeIn 0.5s ease-out;
    position: relative;
    margin: 0 auto; /* Center the form initially */
    transition: var(--transition);
  }

  /* When employee data is shown, move form to the left */
  .main-container.has-employee-data .leave-request {
    margin: 0; /* Remove auto margin */
    flex: 1;
  }

  .leave-request h2 {
    font-size: 1.75rem;
    text-align: center;
    margin-bottom: 2rem;
    color: var(--primary);
    position: relative;
  }

  .leave-request h2::after {
    content: '';
    display: block;
    width: 60px;
    height: 4px;
    background: linear-gradient(to right, var(--primary), var(--accent));
    margin: 0.5rem auto 0;
    border-radius: 2px;
  }

  .close-btn {
    position: absolute;
    top: 1.5rem;
    right: 1.5rem;
    font-size: 1.5rem;
    background: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(5px);
    border: none;
    cursor: pointer;
    color: var(--gray);
    transition: var(--transition);
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    overflow: hidden;
    position: relative;
  }

  .close-btn::before {
    content: '';
    position: absolute;
    width: 0;
    height: 0;
    background: rgba(239, 35, 60, 0.2);
    border-radius: 50%;
    transition: width 0.4s ease, height 0.4s ease;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .close-btn:hover::before {
    width: 200%;
    height: 200%;
  }

  .close-btn:hover {
    color: var(--danger);
    background: rgba(255, 255, 255, 0.9);
  }

  .form-group {
    margin-bottom: 1.5rem;
    position: relative;
  }

  .form-group label {
    display: block;
    font-weight: 500;
    color: var(--dark);
    margin-bottom: 0.75rem;
    font-size: 0.95rem;
  }

  .form-group input,
  .form-group select,
  .form-group textarea {
    width: 100%;
    padding: 1rem;
    border: 1px solid var(--gray-light);
    border-radius: 8px;
    font-size: 1rem;
    transition: var(--transition);
    background-color: white;
    font-family: 'Poppins', sans-serif;
  }

  .form-group input:focus,
  .form-group select:focus,
  .form-group textarea:focus {
    border-color: var(--primary);
    outline: none;
    box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
  }

  .form-group textarea {
    resize: vertical;
    min-height: 120px;
  }

  .error-message {
    color: var(--danger);
    font-size: 0.85rem;
    margin-top: 0.5rem;
    display: block;
  }

  #reasonCounter {
    font-size: 0.85rem;
    color: var(--gray);
    text-align: right;
    margin-top: 0.25rem;
  }

  .form-actions {
    text-align: center;
    margin-top: 2rem;
  }

  .btn {
    padding: 1rem 2.5rem;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: var(--transition);
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    position: relative;
    overflow: hidden;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(5px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.5s ease;
  }

  .btn:hover::before {
    left: 100%;
  }

  .btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
  }

  .btn:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.3);
  }

  .btn-primary {
    background: linear-gradient(135deg, var(--primary), var(--primary-light));
    color: white;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  .btn-primary:hover {
    background: linear-gradient(135deg, var(--secondary), var(--primary));
    box-shadow: 0 8px 20px rgba(67, 97, 238, 0.3);
  }

  .btn-success {
    background: linear-gradient(135deg, var(--success), #4895ef);
    color: white;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  .btn-success:hover {
    background: linear-gradient(135deg, #4895ef, var(--success));
    box-shadow: 0 8px 20px rgba(76, 201, 240, 0.3);
  }

  .btn-danger {
    background: linear-gradient(135deg, var(--danger), #f72585);
    color: white;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  .btn-danger:hover {
    background: linear-gradient(135deg, #f72585, var(--danger));
    box-shadow: 0 8px 20px rgba(239, 35, 60, 0.3);
  }

  .submit-btn {
    background: linear-gradient(135deg, var(--primary), var(--accent));
    color: white;
    padding: 1rem 3rem;
    font-size: 1.1rem;
    animation: pulse 2s infinite;
  }

  .submit-btn:hover {
    background: linear-gradient(135deg, var(--accent), var(--primary));
    box-shadow: 0 10px 25px rgba(67, 97, 238, 0.4);
  }

  .calendar-btn {
    background: linear-gradient(135deg, var(--secondary), var(--primary-light));
    color: white;
    padding: 1rem 2.5rem;
  }

  .calendar-btn:hover {
    background: linear-gradient(135deg, var(--primary-light), var(--secondary));
    box-shadow: 0 8px 20px rgba(63, 55, 201, 0.3);
  }

  .apply-btn {
    background: linear-gradient(135deg, var(--danger), var(--warning));
    color: white;
    padding: 0.75rem 1.25rem;
  }

  .apply-btn:hover {
    background: linear-gradient(135deg, var(--warning), var(--danger));
    box-shadow: 0 8px 20px rgba(239, 35, 60, 0.3);
  }

  #prevMonth, #nextMonth {
    background: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(5px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: var(--primary);
    padding: 0.75rem 1.25rem;
    font-size: 0.9rem;
    font-weight: 600;
    border-radius: 8px;
    transition: var(--transition);
  }

  #prevMonth:hover, #nextMonth:hover {
    background: rgba(255, 255, 255, 0.9);
    color: var(--secondary);
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  }

  #error-message {
    color: var(--danger);
    text-align: center;
    margin-top: 1.5rem;
    font-weight: 500;
    padding: 1rem;
    background-color: rgba(239, 35, 60, 0.1);
    border-radius: 8px;
    display: none;
  }

  /* Employee Data Section */
  .employee-data {
    padding: 2.5rem;
    flex: 1;
    min-width: 300px;
    animation: fadeIn 0.5s ease-out;
    display: none;
  }

  .employee-data h2 {
    font-size: 1.75rem;
    text-align: center;
    margin-bottom: 2rem;
    color: var(--primary);
    position: relative;
  }

  .employee-data h2::after {
    content: '';
    display: block;
    width: 60px;
    height: 4px;
    background: linear-gradient(to right, var(--primary), var(--accent));
    margin: 0.5rem auto 0;
    border-radius: 2px;
  }

  .employee-info {
    margin-bottom: 2rem;
    text-align: center;
    padding: 1.5rem;
    background-color: rgba(67, 97, 238, 0.05);
    border-radius: 8px;
  }

  .employee-info p {
    font-size: 1.1rem;
    color: var(--dark);
    font-weight: 500;
  }

  .employee-info p strong {
    color: var(--primary);
  }

  .leave-balance {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2.5rem;
  }

  .balance-card {
    background: white;
    border-radius: 10px;
    padding: 1.75rem;
    text-align: center;
    transition: var(--transition);
    border: 1px solid rgba(67, 97, 238, 0.1);
  }

  .balance-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  }

  .balance-card h3 {
    font-size: 1.1rem;
    color: var(--gray);
    margin-bottom: 1rem;
    font-weight: 500;
  }

  .balance-card p {
    font-size: 2rem;
    font-weight: 700;
    color: var(--primary);
    margin: 0;
  }

  .button-container {
    display: flex;
    justify-content: center;
    gap: 1rem;
    flex-wrap: wrap;
    margin-bottom: 2.5rem;
  }

  /* Leave History Styles */
  .leave-history {
    margin-top: 2.5rem;
  }

  .leave-history h2 {
    font-size: 1.5rem;
    text-align: center;
    margin-bottom: 2rem;
    color: var(--primary);
  }

  .history-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
  }

  .history-card {
    background: white;
    border-radius: 10px;
    padding: 1.5rem;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
    transition: var(--transition);
    border: 1px solid rgba(67, 97, 238, 0.1);
  }

  .history-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  }

  .history-card p {
    font-size: 0.9rem;
    margin: 0.75rem 0;
    color: var(--dark);
  }

  .history-card p strong {
    color: var(--primary);
    display: inline-block;
    min-width: 90px;
    font-weight: 500;
  }

  .no-history {
    text-align: center;
    color: var(--gray);
    font-style: italic;
    font-size: 1rem;
    margin-top: 1rem;
    padding: 2rem;
    background-color: rgba(233, 236, 239, 0.5);
    border-radius: 8px;
  }

  /* Calendar Section */
  .calendar-container {
    display: none;
    flex-direction: column;
    gap: 2rem;
    margin: 2rem 0;
    animation: fadeIn 0.5s ease-out;
  }

  .calendar-main {
    display: flex;
    flex-wrap: wrap;
    gap: 2rem;
  }

  .calendar-content {
    flex: 2;
    padding: 2rem;
    min-width: 0;
  }

  .calendar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .calendar-header h2 {
    font-size: 1.5rem;
    margin: 0;
    color: var(--primary);
  }

  .calendar-nav {
    display: flex;
    gap: 0.75rem;
  }

  .calendar-nav button {
    padding: 0.75rem 1.25rem;
    font-size: 0.9rem;
    font-weight: 600;
  }

  .calendar-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 0.5rem;
  }

  .calendar-grid div {
    padding: 1rem;
    text-align: center;
    border-radius: 8px;
    min-height: 80px;
    position: relative;
    background: white;
    border: 1px solid var(--gray-light);
    transition: var(--transition);
  }

  .calendar-grid .day-name {
    background: var(--primary);
    color: white;
    font-weight: 600;
    border: none;
    padding: 0.75rem;
    font-size: 0.9rem;
  }

  .calendar-grid .day {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
  }

  .calendar-grid .day:hover {
    background: rgba(67, 97, 238, 0.05);
  }

  .calendar-grid .other-month {
    background: var(--gray-light);
    color: var(--gray);
    opacity: 0.6;
  }

  .leave-day {
    background: linear-gradient(135deg, rgba(67, 97, 238, 0.1), rgba(76, 201, 240, 0.1)) !important;
    border: 1px solid var(--primary) !important;
    color: var(--primary);
    font-weight: 600;
  }

  .leave-day .leave-info {
    display: none;
    position: absolute;
    background: white;
    color: var(--dark);
    padding: 1rem;
    border-radius: 8px;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.15);
    z-index: 10;
    width: 250px;
    left: 100%;
    top: 0;
    font-size: 0.8rem;
    text-align: left;
    border: 1px solid var(--gray-light);
  }

  .leave-day:hover .leave-info {
    display: block;
  }

  .today {
    background: var(--primary) !important;
    color: white !important;
    font-weight: 700;
    border: none !important;
  }

  .leave-details-card {
    flex: 1;
    padding: 2rem;
    min-width: 300px;
    max-height: 600px;
    display: flex;
    flex-direction: column;
  }

  .leave-details-content {
    flex: 1;
    overflow-y: auto;
    padding-right: 0.75rem;
  }

  .leave-details-content::-webkit-scrollbar {
    width: 8px;
  }

  .leave-details-content::-webkit-scrollbar-track {
    background: var(--gray-light);
    border-radius: 4px;
  }

  .leave-details-content::-webkit-scrollbar-thumb {
    background: var(--primary);
    border-radius: 4px;
  }

  .leave-details-card h2 {
    font-size: 1.5rem;
    margin-bottom: 1.5rem;
    color: var(--primary);
  }

  .leave-details-card .no-requests {
    text-align: center;
    color: var(--gray);
    font-style: italic;
    padding: 2rem;
    background-color: rgba(233, 236, 239, 0.5);
    border-radius: 8px;
  }

  .leave-details-card .leave-item {
    background: white;
    padding: 1.25rem;
    border-radius: 8px;
    margin-bottom: 1rem;
    font-size: 0.9rem;
    border: 1px solid var(--gray-light);
    transition: var(--transition);
  }

  .leave-details-card .leave-item:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
  }

  .leave-details-card .leave-item p {
    margin: 0.5rem 0;
    color: var(--dark);
  }

  .leave-details-card .leave-item p strong {
    color: var(--primary);
    font-weight: 500;
  }

  /* Status Badges */
  .status-badge {
    display: inline-block;
    padding: 0.35rem 0.75rem;
    border-radius: 50px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .status-approved {
    background-color: rgba(76, 201, 240, 0.1);
    color: var(--success);
  }

  .status-pending {
    background-color: rgba(248, 150, 30, 0.1);
    color: var(--warning);
  }

  .status-rejected {
    background-color: rgba(239, 35, 60, 0.1);
    color: var(--danger);
  }

  /* Animations */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }

  /* Responsive Design */
  @media (min-width: 1024px) {
    .main-container {
      flex-wrap: nowrap;
    }

    .calendar-main {
      flex-wrap: nowrap;
    }

    .calendar-content {
      flex: 3;
    }

    .leave-details-card {
      flex: 1;
    }
  }

  @media (max-width: 768px) {
    .container {
      padding: 1.5rem;
    }

    .banner h1 {
      font-size: 2rem;
    }

    .banner .quote {
      font-size: 1rem;
    }

    .main-container {
      flex-direction: column;
    }

    .leave-request,
    .employee-data {
      max-width: 100%;
      padding: 1.75rem;
    }

    .leave-balance {
      grid-template-columns: 1fr;
    }

    .history-cards {
      grid-template-columns: 1fr;
    }

    .button-container {
      flex-direction: column;
    }

    .btn {
      width: 100%;
    }

    .calendar-grid div {
      padding: 0.75rem;
      min-height: 70px;
      font-size: 0.9rem;
    }

    .leave-day .leave-info {
      width: 200px;
      left: 50%;
      transform: translateX(-50%);
      top: 100%;
    }

    .calendar-content,
    .leave-details-card {
      padding: 1.5rem;
    }
  }

  @media (max-width: 480px) {
    .banner {
      padding: 2rem 1rem;
    }

    .banner h1 {
      font-size: 1.75rem;
    }

    .leave-request,
    .employee-data {
      padding: 1.5rem 1.25rem;
    }

    .calendar-grid div {
      padding: 0.5rem;
      min-height: 60px;
      font-size: 0.8rem;
    }

    .leave-day .leave-info {
      width: 180px;
      font-size: 0.7rem;
    }
  }
</style>
</head>
<body>
  <section class="banner container">
    <h1>Employee Leave Management</h1>
    <p class="quote">Plan your time-off with ease and balance.</p>
  </section>

  <section class="main-container container">
    <section class="leave-request card">
      <!-- <button class="close-btn">✕</button> -->
      <h2>Request Leave</h2>
      <form id="leaveRequestForm">
        <div class="form-group">
          <label for="Empid">Employee ID</label>
          <input 
            type="text" 
            id="Empid" 
            name="Empid" 
            required 
            maxlength="7"
            pattern="^ATS0(?!000)\d{3}$"
            title="Emp-ID must be 1-7 alphanumeric characters"
          >
          <small class="error-message"></small>
        </div>
        <div class="form-group">
          <label for="empName">Employee Name</label>
          <input 
            type="text" 
            id="empName" 
            name="empName" 
            required 
            maxlength="50"
            pattern="[a-zA-Z\s\.,\-]{1,50}"
            title="Name must be 1-50 characters, letters, spaces, or basic punctuation"
          >
          <small class="error-message"></small>
        </div>
        <div class="form-group">
          <label for="leaveType">Leave Type</label>
          <select id="leaveType" required>
            <option value="">Select option</option>
            <option>Annual Leave</option>
            <option>Sick Leave</option>
            <option>Casual Leave</option>
          </select>
        </div>
        <div class="form-group">
          <label for="startDate">Start Date</label>
          <input 
            type="date" 
            id="startDate" 
            required
            pattern="\d{4}-\d{2}-\d{2}"
            title="Please enter a date in YYYY-MM-DD format"
          >
        </div>
        <div class="form-group">
          <label for="endDate">End Date</label>
          <input 
            type="date" 
            id="endDate" 
            required
            pattern="\d{4}-\d{2}-\d{2}"
            title="Please enter a date in YYYY-MM-DD format"
          >
        </div>
        <div class="form-group">
          <label for="reason">Reason</label>
          <textarea 
            id="reason" 
            rows="4" 
            required
            maxlength="500"
            title="Reason must be 3-100 words"
            oninput="validateReason(this)"
          ></textarea>
          <small id="reasonCounter">Words: 0/100</small>
          <small class="error-message" id="reasonError" style="display: none;"></small>
        </div>
        <div class="form-actions">
          <button type="submit" class="submit-btn">Submit Request</button>
        </div>
      </form>
      <p id="error-message" style="display: none;"></p>
    </section>

    <section class="employee-data card" id="employeeDataSection">
      <h2>Employee Leave Details</h2>
      <div class="employee-info">
        <p><strong>Name:</strong> <span id="employeeName">N/A</span></p>
      </div>
      <div class="leave-balance">
        <div class="balance-card">
          <h3>Annual Leave</h3>
          <p><span id="annualLeaveBalance">10</span> days</p>
        </div>
        <div class="balance-card">
          <h3>Sick Leave</h3>
          <p><span id="sickLeaveBalance">5</span> days</p>
        </div>
        <div class="balance-card">
          <h3>Casual Leave</h3>
          <p><span id="casualLeaveBalance">8</span> days</p>
        </div>
      </div>
      <div class="button-container">
        <button class="calendar-btn">View Calendar</button>
      </div>
      <div class="leave-history">
        <h2>Leave History</h2>
        <div class="history-cards" id="leaveHistoryCards"></div>
      </div>
    </section>
  </section>

  <section class="calendar-container container">
    <div class="calendar-main">
      <div class="calendar-content">
        <div class="calendar-header">
          <h2 id="calendarTitle"></h2>
          <div class="calendar-nav">
            <button id="prevMonth">Previous</button>
            <button id="nextMonth">Next</button>
            <button id="applyBtn" class="apply-btn">Back</button>
          </div>
        </div>
        <div class="calendar-grid" id="calendarGrid"></div>
      </div>
      <div class="leave-details-card">
        <h2>Leave Details</h2>
        <div class="leave-details-content" id="leaveDetailsContent"></div>
      </div>
    </div>
  </section>

  <script>
    function countWords(text) {
      const words = text.trim() ? text.trim().split(/\s+/) : [];
      return words.filter(word => word.length > 0).length;
    }

    function validateReason(textarea) {
      const reasonText = textarea.value;
      const wordCount = countWords(reasonText);
      const reasonCounter = document.getElementById("reasonCounter");
      const reasonError = document.getElementById("reasonError");

      const hasSpecialChars = /[^a-zA-Z0-9 ,.!?]/.test(reasonText);
      const hasMultipleSpaces = / {2,}/.test(reasonText);

      reasonCounter.textContent = `Words: ${wordCount}/100`;

      if (hasSpecialChars) {
        reasonError.textContent = "Only letters, numbers, and basic punctuation allowed";
        reasonError.style.display = "block";
        textarea.setCustomValidity("Invalid characters");
        return false;
      } else if (hasMultipleSpaces) {
        reasonError.textContent = "Multiple consecutive spaces not allowed";
        reasonError.style.display = "block";
        textarea.setCustomValidity("Multiple spaces");
        return false;
      } else if (wordCount > 100) {
        reasonError.textContent = "Reason cannot exceed 100 words";
        reasonError.style.display = "block";
        textarea.setCustomValidity("Too long");
        return false;
      } else if (wordCount < 3 && reasonText.trim().length > 0) {
        reasonError.textContent = "Reason must be at least 3 words";
        reasonError.style.display = "block";
        textarea.setCustomValidity("Too short");
        return false;
      } else if (reasonText.trim().length === 0) {
        reasonError.textContent = "Reason cannot be empty";
        reasonError.style.display = "block";
        textarea.setCustomValidity("Required");
        return false;
      } else {
        reasonError.style.display = "none";
        textarea.setCustomValidity("");
        return true;
      }
    }

    function isWithinSixMonths(date) {

      const today = new Date();
      const sixMonthsFromNow = new Date();
      sixMonthsFromNow.setMonth(today.getMonth() + 6);
      return date <= sixMonthsFromNow;
    }

    async function fetchLeaveBalances(empId) {
      try {
        const response = await fetch(`http://51.20.8.44:3059/api/leave-balances/${empId}`, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'Failed to fetch leave balances');
        }
        return await response.json();
      } catch (error) {
        console.error('Error fetching leave balances:', error.message);
        throw error;
      }
    }

    async function fetchLeaveHistory(empId) {
      try {
        const response = await fetch(`http://51.20.8.44:3059/api/leave-requests/${empId}`, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'Failed to fetch leave history');
        }
        return await response.json();
      } catch (error) {
        console.error('Error fetching leave history:', error);
        return [];
      }
    }

    async function submitLeaveRequest(request) {
      try {
        const response = await fetch('http://51.20.8.44:3059/api/leave-requests', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(request)
        });
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'Failed to submit leave request');
        }
        return await response.json();
      } catch (error) {
        console.error('Error submitting leave request:', error);
        throw error;
      }
    }

    // Format date for display (e.g., "June 10, 2025")
    function formatDateDisplay(dateStr) {
      const date = new Date(dateStr);
      return date.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' });
    }

    // Format date for submission (e.g., "2025-06-10")
    function formatDateForSubmission(date) {
      return date.toISOString().split("T")[0];
    }

    async function loadLeaveDetails(empId) {
      fetchLeaveHistory(empId).then(leaveRequests => {
        const leaveDetailsContent = document.getElementById("leaveDetailsContent");
        leaveDetailsContent.innerHTML = "";

        if (leaveRequests.length === 0) {
          const noRequests = document.createElement("p");
          noRequests.classList.add("no-requests");
          noRequests.textContent = "No leave requests found";
          leaveDetailsContent.appendChild(noRequests);
          return;
        }

        fetchLeaveBalances(empId).then(balance => {
          const empName = balance.emp_name || 'N/A';
          leaveRequests.forEach(request => {
            const leaveItem = document.createElement("div");
            leaveItem.classList.add("leave-item");
            leaveItem.innerHTML = `
              <p><strong>Emp-Id:</strong> ${request.emp_id}</p>
              <p><strong>Name:</strong> ${empName}</p>
              <p><strong>Type:</strong> ${request.leave_type}</p>
              <p><strong>Start:</strong> ${formatDateDisplay(request.start_date)}</p>
              <p><strong>End:</strong> ${formatDateDisplay(request.end_date)}</p>
              <p><strong>Reason:</strong> ${request.reason}</p>
              <p><strong>Status:</strong> ${request.status}</p>
            `;
            leaveDetailsContent.appendChild(leaveItem);
          });
        }).catch(error => {
          const noRequests = document.createElement("p");
          noRequests.classList.add("no-requests");
          noRequests.textContent = "Unable to fetch employee name for leave details.";
          leaveDetailsContent.appendChild(noRequests);
        });
      });
    }

    async function loadEmployeeData(empId) {
      const employeeDataSection = document.getElementById("employeeDataSection");
      const employeeName = document.getElementById("employeeName");
      const annualLeaveBalance = document.getElementById("annualLeaveBalance");
      const sickLeaveBalance = document.getElementById("sickLeaveBalance");
      const casualLeaveBalance = document.getElementById("casualLeaveBalance");
      const leaveHistoryCards = document.getElementById("leaveHistoryCards");
      const errorMessageElement = document.getElementById("error-message");
      const mainContainer = document.querySelector('.main-container');

      fetchLeaveBalances(empId).then(balances => {
        employeeName.textContent = balances.emp_name || 'N/A';
        annualLeaveBalance.textContent = balances.annual;
        sickLeaveBalance.textContent = balances.sick;
        casualLeaveBalance.textContent = balances.casual;
        
        // Show employee data section and adjust layout
        employeeDataSection.style.display = "block";
        mainContainer.classList.add('has-employee-data');
        
        if (errorMessageElement) {
          errorMessageElement.style.display = "none";
        }
      }).catch(error => {
        console.error('Error fetching balances:', error.message);
        if (error.message === 'Employee not found') {
          if (errorMessageElement) {
            errorMessageElement.textContent = "Employee not found. Please submit a leave request to register.";
            errorMessageElement.style.display = "block";
          }
        } else {
          if (errorMessageElement) {
            errorMessageElement.textContent = error.message || "Failed to fetch leave balances.";
            errorMessageElement.style.display = "block";
          }
        }
        employeeDataSection.style.display = "none";
        mainContainer.classList.remove('has-employee-data');
      });

      fetchLeaveHistory(empId).then(leaveRequests => {
        leaveHistoryCards.innerHTML = "";

        if (leaveRequests.length === 0) {
          const noHistory = document.createElement("p");
          noHistory.classList.add("no-history");
          noHistory.textContent = "No leave history found";
          leaveHistoryCards.appendChild(noHistory);
          return;
        }

        fetchLeaveBalances(empId).then(balances => {
          const empName = balances.emp_name || 'N/A';
          leaveRequests.forEach(request => {
            const card = document.createElement("div");
            card.classList.add("history-card");
            card.innerHTML = `
              <p><strong>Emp-ID:</strong> ${request.emp_id}</p>
              <p><strong>Name:</strong> ${empName}</p>
              <p><strong>Type:</strong> ${request.leave_type}</p>
              <p><strong>Start:</strong> ${formatDateDisplay(request.start_date)}</p>
              <p><strong>End:</strong> ${formatDateDisplay(request.end_date)}</p>
              <p><strong>Status:</strong> ${request.status}</p>
              <p><strong>Reason:</strong> ${request.reason}</p>
            `;
            leaveHistoryCards.appendChild(card);
          });
        }).catch(error => {
          const noHistory = document.createElement("p");
          noHistory.classList.add("no-history");
          noHistory.textContent = "Unable to fetch employee name for history.";
          leaveHistoryCards.appendChild(noHistory);
        });
      }).catch(error => {
        console.error('Error fetching history:', error);
        if (errorMessageElement) {
          errorMessageElement.textContent = error.message || "Failed to fetch leave history.";
          errorMessageElement.style.display = "block";
        }
      });
    }

    document.addEventListener("DOMContentLoaded", function () {
      const leaveRequestSection = document.querySelector(".leave-request");
      const employeeDataSection = document.querySelector(".employee-data");
      const calendarSection = document.querySelector(".calendar-container");
      const calendarBtn = document.querySelector(".calendar-btn");
      const applyBtn = document.getElementById("applyBtn");
      const closeBtn = document.querySelector(".close-btn");
      const calendarGrid = document.getElementById("calendarGrid");
      const calendarTitle = document.getElementById("calendarTitle");
      const prevMonthBtn = document.getElementById("prevMonth");
      const nextMonthBtn = document.getElementById("nextMonth");
      const empIdInput = document.getElementById("Empid");
      const mainContainer = document.querySelector('.main-container');

      let currentDate = new Date();
      let currentMonth = currentDate.getMonth();
      let currentYear = currentDate.getFullYear();
      let empId = null;

      leaveRequestSection.style.display = "block";
      employeeDataSection.style.display = "none";
      calendarSection.style.display = "none";

      empIdInput.addEventListener("blur", async function () {
        const empIdValue = empIdInput.value.trim();
        if (/^ATS0(?!000)\d{3}$/.test(empIdValue)) {
          try {
            empId = empIdValue;
            loadEmployeeData(empId);
            loadLeaveDetails(empId);
          } catch (error) {
            console.error('Error fetching data for emp_id:', error);
            const errorMessageElement = document.getElementById("error-message");
            if (errorMessageElement) {
              errorMessageElement.textContent = error.message || "Failed to fetch data.";
              errorMessageElement.style.display = "block";
            }
          }
        }
      });

      calendarBtn.addEventListener("click", function () {
        if (!empId) {
          alert("Please enter an Emp-ID first.");
          return;
        }
        calendarSection.style.display = "block";
        leaveRequestSection.style.display = "none";
        employeeDataSection.style.display = "none";
        generateCalendar(currentMonth, currentYear, empId);
        loadLeaveDetails(empId);
      });

      applyBtn.addEventListener("click", function () {
        leaveRequestSection.style.display = "block";
        employeeDataSection.style.display = empId ? "block" : "none";
        calendarSection.style.display = "none";
      });

      closeBtn.addEventListener("click", function () {
        leaveRequestSection.style.display = "block";
        employeeDataSection.style.display = empId ? "block" : "none";
        calendarSection.style.display = "none";
        if (empId) loadLeaveDetails(empId);
      });

      function isValidDateFormat(dateString) {
        const datePattern = /^\d{4}-\d{2}-\d{2}$/;
        if (!datePattern.test(dateString)) return false;
        const date = new Date(dateString);
        return !isNaN(date.getTime());
      }

      function generateCalendar(month, year, empId) {
        calendarGrid.innerHTML = "";
        calendarTitle.textContent = `${new Date(year, month).toLocaleString("default", { month: "long" })} ${year}`;

        const daysOfWeek = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
        daysOfWeek.forEach((day) => {
          const dayName = document.createElement("div");
          dayName.classList.add("day-name");
          dayName.textContent = day;
          calendarGrid.appendChild(dayName);
        });

        const firstDay = new Date(year, month, 1).getDay();
        const daysInMonth = new Date(year, month + 1, 0).getDate();
        const prevMonthDays = new Date(year, month, 0).getDate();

        fetchLeaveHistory(empId).then(leaveRequests => {
          const approvedLeaves = leaveRequests.filter((req) => req.status === "Pending");

          for (let i = 0; i < firstDay; i++) {
            const emptyDay = document.createElement("div");
            emptyDay.classList.add("day", "other-month");
            emptyDay.textContent = prevMonthDays - firstDay + i + 1;
            calendarGrid.appendChild(emptyDay);
          }

          for (let day = 1; day <= daysInMonth; day++) {
            const dayDiv = document.createElement("div");
            dayDiv.classList.add("day");
            dayDiv.textContent = day;

            const today = new Date();
            if (
              day === today.getDate() &&
              month === today.getMonth() &&
              year === today.getFullYear()
            ) {
              dayDiv.classList.add("today");
            }

            const currentDateStr = `${year}-${String(month + 1).padStart(2, "0")}-${String(day).padStart(2, "0")}`;
            const leavesOnDay = approvedLeaves.filter((leave) => {
              return currentDateStr >= leave.start_date && currentDateStr <= leave.end_date;
            });

            if (leavesOnDay.length > 0) {
              dayDiv.classList.add("leave-day");
              fetchLeaveBalances(empId).then(balance => {
                const empName = balance.emp_name || 'N/A';
                leavesOnDay.forEach((leave) => {
                  const leaveInfo = document.createElement("div");
                  leaveInfo.classList.add("leave-info");
                  leaveInfo.innerHTML = `
                    <strong>${leave.leave_type}</strong><br>
                    Emp-ID: ${leave.emp_id}<br>
                    Name: ${empName}<br>
                    Reason: ${leave.reason}
                  `;
                  dayDiv.appendChild(leaveInfo);
                });
              }).catch(error => {
                leavesOnDay.forEach((leave) => {
                  const leaveInfo = document.createElement("div");
                  leaveInfo.classList.add("leave-info");
                  leaveInfo.innerHTML = `
                    <strong>${leave.leave_type}</strong><br>
                    Emp-ID: ${leave.emp_id}<br>
                    Name: N/A<br>
                    Reason: ${leave.reason}
                  `;
                  dayDiv.appendChild(leaveInfo);
                });
              });
            }

            calendarGrid.appendChild(dayDiv);
          }

          const lastDay = new Date(year, month + 1, 0).getDay();
          for (let i = 1; i <= 6 - lastDay; i++) {
            const emptyDay = document.createElement("div");
            emptyDay.classList.add("day", "other-month");
            emptyDay.textContent = i;
            calendarGrid.appendChild(emptyDay);
          }
        });
      }

      prevMonthBtn.addEventListener("click", () => {
        currentMonth--;
        if (currentMonth < 0) {
          currentMonth = 11;
          currentYear--;
        }
        generateCalendar(currentMonth, currentYear, empId);
      });

      nextMonthBtn.addEventListener("click", () => {
        currentMonth++;
        if (currentMonth > 11) {
          currentMonth = 0;
          currentYear++;
        }
        generateCalendar(currentMonth, currentYear, empId);
      });

      document.getElementById("leaveRequestForm").addEventListener("submit", async function (e) {
        e.preventDefault();

        const leaveType = document.getElementById("leaveType").value;
        const empIdInput = document.getElementById("Empid").value.trim();
        const empNameInput = document.getElementById("empName").value.trim();
        const startDateInput = document.getElementById("startDate");
        const endDateInput = document.getElementById("endDate");
        const errorMessageElement = document.getElementById("error-message");
        const reasonTextarea = document.getElementById("reason");
        const reason = reasonTextarea.value;

        if (!/^ATS0(?!000)\d{3}$/.test(empIdInput)) {
          if (errorMessageElement) {
            errorMessageElement.textContent = "Emp-ID must be 1-7 alphanumeric characters.";
            errorMessageElement.style.display = "block";
          }
          return;
        }

        if (!/^[a-zA-Z\s.,-]{1,50}$/.test(empNameInput)) {
          if (errorMessageElement) {
            errorMessageElement.textContent = "Name must be 1-50 characters, letters, spaces, or basic punctuation.";
            errorMessageElement.style.display = "block";
          }
          return;
        }

        if (!validateReason(reasonTextarea)) {
          return;
        }

        if (!leaveType) {
          if (errorMessageElement) {
            errorMessageElement.textContent = "Please select a leave type.";
            errorMessageElement.style.display = "block";
          }
          return;
        }

        if (!isValidDateFormat(startDateInput.value)) {
          if (errorMessageElement) {
            errorMessageElement.textContent = "Invalid start date format. Use YYYY-MM-DD.";
            errorMessageElement.style.display = "block";
          }
          return;
        }

        if (!isValidDateFormat(endDateInput.value)) {
          if (errorMessageElement) {
            errorMessageElement.textContent = "Invalid end date format. Use YYYY-MM-DD.";
            errorMessageElement.style.display = "block";
          }
          return;
        }

        const startDate = new Date(startDateInput.value);
        const endDate = new Date(endDateInput.value);
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        if (errorMessageElement) {
          errorMessageElement.style.display = "none";
        }

        if (startDate < today) {
          if (errorMessageElement) {
            errorMessageElement.textContent = "Start date cannot be in the past.";
            errorMessageElement.style.display = "block";
          }
          return;
        }

        if (!isWithinSixMonths(startDate) || !isWithinSixMonths(endDate)) {
          if (errorMessageElement) {
            errorMessageElement.textContent = "Leave dates cannot be more than 6 months in the future.";
            errorMessageElement.style.display = "block";
          }
          return;
        }

        if (endDate < startDate) {
          if (errorMessageElement) {
            errorMessageElement.textContent = "End date cannot be earlier than start date.";
            errorMessageElement.style.display = "block";
          }
          return;
        }

        try {
          empId = empIdInput;

          const leaveRequest = {
            Empid: empId,
            emp_name: empNameInput,
            leaveType,
            startDate: formatDateForSubmission(startDate),
            endDate: formatDateForSubmission(endDate),
            reason,
            submittedDate: formatDateForSubmission(new Date())
          };

          await submitLeaveRequest(leaveRequest);
          loadEmployeeData(empId);
          loadLeaveDetails(empId);
          document.getElementById("leaveRequestForm").reset();
          document.getElementById("reasonCounter").textContent = "Words: 0/100";
          alert("Leave Request submitted successfully!");
        } catch (error) {
          if (errorMessageElement) {
            errorMessageElement.textContent = error.message || "Failed to submit leave request.";
            errorMessageElement.style.display = "block";
          }
        }
      });
    });
  </script>
</body>
</html>